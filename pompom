#! /bin/bash

set -o errexit -o nounset -o pipefail

# Default arguments.
COMMAND="${1:-start}"
COMMANDTYPE="${2:-work}"

# Files for storing the current PID and state.
PIDFILE="/tmp/.pom-pid"
STATEFILE="/tmp/.pom-state"

# Set a nice name for easy referencing.
SELF="$(basename "${0}")"

# Configuration options
POMPOM_WORK_INTERVAL="${POM_WORK_INTERVAL:-25}"
POMPOM_BREAK_INTERVAL="${POMPOM_BREAK_INTERVAL:-5}"
POMPOM_SILENT="${POMPOM_SILENT:-0}"
POMPOM_INVIS="${POMPOM_INVIS:-0}"

# Default intervals are 25 minutes and 5 minutes.
WORKINTERVAL=$(( 60 * POMPOM_WORK_INTERVAL ))
BREAKINTERVAL=$(( 60 * POMPOM_BREAK_INTERVAL ))

_terminate()
{
	echo "${1}" 1>&2
	exit 1
}

_alert() {
	_say "${1}"
	_notify "${1}"
}

_notify()
{
	[[ ! "$POMPOM_INVIS" -eq 0 ]] && return 0

	local MSG
	MSG="${1:-}"

	if [[ -x "$(command -v osascript)" ]]
	then
		osascript -e "display notification \"${MSG}\" with title \"${SELF}\""
	else
		zenity --notification --text="${SELF} - ${MSG}" --timeout=2 &
	fi
}

_say()
{
	[[ ! "$POMPOM_SILENT" -eq 0 ]] && return 0

	if [[ -x "$(command -v say)" ]]
	then
		say -v Moira "${1}"
	else
		spd-say "${1}" --voice-type "female3"
	fi
}

_isrunning()
{
	[[ -e "${PIDFILE}" ]]
}

_savepid()
{
	echo "${1}" > "${PIDFILE}"
}

_rmpid()
{
	_isrunning && rm "${PIDFILE}"
}

_hasstate()
{
	[[ -e "${STATEFILE}" ]]
}

_setstate()
{
	local TS REMAINING END
	TS="$(date +%s)"
	REMAINING="${3}"
	END=$(( TS + REMAINING ))

	cat <<-EOF > "${STATEFILE}"
	OP=${1}
	STATE=${2}
	REMAINING=${REMAINING}
	END=${END}
EOF
}

_rmstate()
{
	_hasstate && rm "${STATEFILE}"
}

# @todo Make this more secure.
_getstate()
{
	_hasstate && source "${STATEFILE}"
}

_timefmt()
{
	local M
	M=$(( $1 / 60 ))

	if ! (( M ))
	then
		echo "${1} seconds"
	elif [ "${M}" -eq 1 ]
	then
		echo "1 minute"
	else
		echo "${M} minutes"
	fi
}

if [[ ! -x "$(command -v say)" && ! -x "$(command -v spd-say)" ]]
then
	_terminate "This requires one of 'say' or 'spd-say' to be available on your system"
fi

if [[ ! -x "$(command -v osascript)" && ! -x "$(command -v zenity)" ]]
then
	_terminate "This requires one of 'osascript' or 'zenity' to be available on your system"
fi

if [[ "${#}" -eq 1 && "${1}" = "-h" ]]
then
	cat <<-EOF 1>&2
	pompom is a simple audio-based command-line pomodoro utility.

	It has the following options:

	'start [work|break]' will begin either a work or break, and continue
	switching modes thereafter until stopped

	'stop' will halt the current pomodoro session

	'status' will give the current pomodoro interval status and time

	'pause' will pause the current pomodoro at the current time interval
	until resumed

	'resume' will resume a paused pomodoro interval
EOF
  exit 1
fi

# Test for the case where the command has been independently killed but we still
# have the PIDFILE.
#
# This is slightly convoluted, but lets us check for instances of pompom
# which aren't the currently running process.
#
# N.B. wc is used deliberately here as pgrep on OSX doesn't support -c.
#
# @todo Can we simplify this check?
if [[ "$(pgrep "${SELF}" | wc -l)" -eq 1 ]] && _isrunning
then
	_rmpid
	_rmstate
fi

case "${COMMAND}" in
	start )
		_isrunning && _terminate "${SELF} is already running"

		# Allow for starting with a delay between states.
		# This makes it killable even between states, as it always has a pid.
		DELAY="${4:-0}"

		case "${COMMANDTYPE}" in
			work )
				INTERVAL="${3:-$WORKINTERVAL}"
				# @todo Can this now be a nohup?
				(sleep "${DELAY}" && _alert "start work" && sleep "${INTERVAL}" && "${0}" switch > /dev/null 2>&1) &
				_savepid "${!}"
				_setstate "${COMMANDTYPE}" "${COMMAND}" "$(( INTERVAL + DELAY ))"
				;;
			break )
				INTERVAL="${3:-$BREAKINTERVAL}"
				(sleep "${DELAY}" && _alert "start break" && sleep "${INTERVAL}" && "${0}" switch > /dev/null 2>&1) &
				_savepid "${!}"
				_setstate "${COMMANDTYPE}" "${COMMAND}" "$(( INTERVAL + DELAY ))"
				;;
		esac
		;;
	stop )
		# Deal with the paused state first since it's simpler.
		# @todo Are there any flaws with this approach?
		if _hasstate && ! _isrunning
		then
			read -r -p "${SELF} is paused. Are you sure you want to stop it? (y/n) > " C

			if [[ "${C}" =~ ^[yY]$ ]]
			then
				echo "Stopping ${SELF}"
				_rmstate
			else
				echo "Cancelling"
			fi

			exit 0
		fi

		! _isrunning && _terminate "${SELF} is not running"
		echo "Stopping ${SELF}"
		_say "Goodbye"
		kill "$(cat ${PIDFILE})"
		_rmpid
		_rmstate
		;;
	switch )
		! _isrunning && _terminate "${SELF} is not running"
		_getstate
		_alert "stop ${OP}"

		# We save the old PID to allow us to start a new process then kill
		# the old one without ending up overwriting the old pid file and
		# killing the wrong process.
		OLDPID="$(cat ${PIDFILE})"
		_rmpid
		_rmstate

		# This starts a new pompom process
		case "${OP}" in
			work )
				"${0}" start "break" "${BREAKINTERVAL}" 3
				;;
			break )
				"${0}" start work "${WORKINTERVAL}" 3
				;;
		esac

		# Kill old pompom process
		kill "${OLDPID}"
		;;
	pause )
		! _isrunning && _terminate "${SELF} is not running"
		echo "Pausing ${SELF}"
		kill "$(cat ${PIDFILE})"
		_rmpid
		_getstate

		NOW="$(date +%s)"
		_setstate "${OP}" "${COMMAND}" "$(( END - NOW ))"
		;;
	resume )
		_isrunning && _terminate "${SELF} is already running"
		! _hasstate && _terminate "No state exists to resume"
		_getstate

		[[ "${STATE}" != "pause" ]] && _terminate "${SELF} is not paused. Current state is '${STATE}'"
		echo "Resuming ${OP} with $(_timefmt "${REMAINING}") remaining"
		"${0}" start "${OP}" "${REMAINING}"
		;;
	status )
		if _isrunning || _hasstate
		then
			_getstate

			if [[ "${STATE}" = "pause" ]]
			then
				echo "Currently paused in ${OP} mode. $(_timefmt "${REMAINING}") remaining."
			else
				NOW=$(date +%s)
				echo "Currently in ${OP} mode. $(_timefmt $(( END - NOW ))) remaining."
			fi
		else
			echo "${SELF} is not running"
		fi
		;;
	config )
		echo "POMOM_WORK_INTERVAL is ${POMPOM_WORK_INTERVAL}"
		echo "POMPOM_BREAK_INTERVAL is ${POMPOM_BREAK_INTERVAL}"
		echo "POMPOM_SILENT is ${POMPOM_SILENT}"
		echo "POMPOM_INVIS is ${POMPOM_INVIS}"
		exit 0
		;;
	* )
		_terminate "'${1}' is not a valid command"
		;;
esac

exit 0
